@startuml

actor navegador as nav
boundary "project.routes" as routes
boundary "project.views" as view
control "project.controllers" as controller
entity "project.model" as model
database portfolio as db   
autonumber

activate nav
nav -> routes: GET /projects/:project_id
deactivate nav

activate routes
routes -> controller: get_one_project(req, res)
deactivate routes

activate controller
controller ->> model: get_one_project(id_project)

activate model
model ->> db: db.execute(`SELECT g.*, p.start_date, \n\t\tp.end_date, p.ID \n\tFROM generic g \n\tJOIN projects p \n\tON g.ID = p.ID_generic \n\t WHERE p.id = ?`, [id_project])

activate db
db -->> model: Query OK
deactivate db

model -->> controller: project_info
deactivate model

controller ->> model: get_skills_project(id_project)
activate model
model ->> db: db.execute(`SELECT gs.name, s.ID \n\tFROM generic gs \n\tJOIN skills s \n\t\tON gs.ID = s.ID_generic \n\tJOIN technologies t \n\t\tON s.ID = t.ID_skill \n\tWHERE t.ID_project = ?`, [id_project])

activate db
db -->> model: Query OK
deactivate db

model -->> controller: skills_per_project
deactivate model

controller -> view: res.render('project_modify.ejs',  \n{project_info, \nskills_per_project})
deactivate controller

activate view
view -> nav: HTML modify
deactivate view

activate nav
nav -> routes: POST /projects/:project_id
deactivate nav

activate routes 
routes -> controller: update_project(req, res)
deactivate routes

activate controller 
create entity project
controller -> project: new Project(req.params.media, req.params.name, \n\treq.params.description, req.params.ID_generic, \n\treq.params.start_date, req.params.end_date, req.params.ID)

create entity skills
controller -> skills: skills[] = req.params[6:]
note right: skills are created in the \ncontroller and are a vector

controller ->> model: update_project(project, skills)

activate model
model ->> db: db.execute(`UPDATE generic g \n\tSET media = ?, \n\t\tname = ?, \n\t\tdescription = ?, \n\tWHERE g.ID = ?`, \n\t[project.media, project.name, \n\tproject.description, project.ID_generic])
activate db
model ->> db: db.execute(`UPDATE projects p \n\tSET start_date = ?, \n\t\tend_date = ?, \n\tWHERE p.ID = ?`, \n\t[project.start_date, project.end_date, project.ID])
model ->> db: db.execute(`DELETE FROM technologies t \n\tWHERE t.ID_project = ?`, [project.ID])
model ->> db: db.execute(`INSERT INTO technologies \n\tVALUES (?, ?, ?)`, \n\t[project.ID, ID_skill, ID])
note right: se realiza en un ciclo for hasta que se \nacaben los registros de skills en el vector

db -->> model: Query OK
deactivate db

model -->> controller: promesa
deactivate model
controller -> routes: res.redirect('/home')
deactivate controller
activate routes

@enduml